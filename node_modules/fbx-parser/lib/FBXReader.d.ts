import { FBXData, FBXNode, FBXProperty } from './shared';
export declare class FBXReaderNode {
    fbxNode: FBXNode;
    constructor(fbxNode: FBXNode);
    private nodeFilter;
    /**
     * Returns the first matching node
     * @param name filter for node name
     * @param propFilter filter for property by index and value
     */
    node(name: string, propFilter?: {
        [index: number]: FBXProperty;
    }): FBXReaderNode | undefined;
    node(propFilter?: {
        [index: number]: FBXProperty;
    }): FBXReaderNode | undefined;
    /**
     * Returns all matching nodes
     * @param name filter for node name
     * @param propFilter filter for property by index and value
     */
    nodes(name: string, propFilter?: {
        [index: number]: FBXProperty;
    }): FBXReaderNode[];
    nodes(propFilter?: {
        [index: number]: FBXProperty;
    }): FBXReaderNode[];
    /**
     * Returns the value of the property
     * @param index index of the property
     * @param type test for property type, otherwise return undefined
     */
    prop(index: number, type: 'boolean'): boolean | undefined;
    prop(index: number, type: 'number'): number | undefined;
    prop(index: number, type: 'bigint'): bigint | undefined;
    prop(index: number, type: 'string'): string | undefined;
    prop(index: number, type: 'boolean[]'): boolean[] | undefined;
    prop(index: number, type: 'number[]'): number[] | undefined;
    prop(index: number, type: 'bigint[]'): bigint[] | undefined;
    prop(index: number): FBXProperty | undefined;
}
export declare class FBXReader extends FBXReaderNode {
    fbx: FBXData;
    constructor(fbx: FBXData);
}
